#!/usr/bin/env bash

set -euo pipefail


BASE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"
source "$BASE_DIR/.env"

APP_NAME=${APP_NAME:-"Server"}
LOCKFILE="$BASE_DIR/.deploy.lock"
LOGFILE="$BASE_DIR/worker.log"
REDIS_CLI="redis-cli -u $REDIS_URL"
QUEUE=${REDIS_QUEUE:-deploy:queue}

exec 200>"$LOCKFILE"
flock -n 200 || exit 0

log() {
  echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ") $*" >>"$LOGFILE"
  echo "$*"
}

notify() {
  local message="$1"

  if [[ -z "${WA_MESSAGE_JID_TO:-}" ]]; then
    log "Skipping notification (missing WA_MESSAGE_JID_TO): $message"
    return 0
  fi

  if ! command -v wa-msg >/dev/null 2>&1; then
    log "Skipping notification (wa-msg not found): $message"
    return 0
  fi

  if ! wa-msg "$WA_MESSAGE_JID_TO" "$message"; then
    log "Warning: failed to send WA notification: $message"
  fi
}

shutdown() {
  log "Received shutdown signal, exiting"
  exit 0
}

trap shutdown SIGINT SIGTERM

while true; do
  payload="$($REDIS_CLI LPOP "$QUEUE")" || true
  if [[ -z "$payload" ]]; then
    sleep 1
    continue
  fi

  log "Processing payload: $payload"

  repo=$(jq -r '.repository // empty' <<<"$payload")
  branch=$(jq -r '.branch // empty' <<<"$payload")
  commit=$(jq -r '.commit // empty' <<<"$payload")

  if [[ -z "$repo" || -z "$branch" || -z "$commit" ]]; then
    log "Invalid JSON payload: $payload"
    continue
  fi

  log "Deploying $repo $branch $commit"
  notify "✅ [$APP_NAME] Starting deploy: $repo $branch $commit"

  if "$BASE_DIR/bin/deploy" "$repo" "$branch" "$commit" >>"$LOGFILE" 2>&1; then
    log "Deploy success for $repo@$commit"
    notify "✅ [$APP_NAME] Deploy success: $repo $branch $commit"
  else
    log "Deploy failed for $repo@$commit"
    notify "❌ [$APP_NAME] Deploy failed: $repo $branch $commit"
  fi
done
